<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1862" onload="init(evt)" viewBox="0 0 1200 1862" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1862" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1845.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1845.00"> </text><svg id="frames" x="10" width="1180" total_samples="12036108"><g><title>ZSTD_buildSeqStore (2,006,018 samples, 16.67%)</title><rect x="0.0000%" y="757" width="16.6667%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="767.50">ZSTD_buildSeqStore</text></g><g><title>ZSTD_compressBlock_opt2 (2,006,018 samples, 16.67%)</title><rect x="0.0000%" y="741" width="16.6667%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="751.50">ZSTD_compressBlock_opt2</text></g><g><title>ZSTD_compressBlock_opt_generic (2,006,018 samples, 16.67%)</title><rect x="0.0000%" y="725" width="16.6667%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="735.50">ZSTD_compressBlock_opt_gen..</text></g><g><title>ZSTD_getMatchPrice (2,006,018 samples, 16.67%)</title><rect x="0.0000%" y="709" width="16.6667%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="719.50">ZSTD_getMatchPrice</text></g><g><title>ZSTD_highbit32 (1,003,009 samples, 8.33%)</title><rect x="8.3333%" y="693" width="8.3333%" height="15" fill="rgb(208,68,35)" fg:x="1003009" fg:w="1003009"/><text x="8.5833%" y="703.50">ZSTD_highbit..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1269" width="25.0000%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1279.50">rayon::iter::plumbing::Producer::fold_wi..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1253" width="25.0000%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1263.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as ray..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1237" width="25.0000%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1247.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as ray..</text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1221" width="25.0000%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1231.50">&lt;rayon::iter::while_some::WhileSomeFolde..</text></g><g><title>&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1205" width="25.0000%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1215.50">&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1189" width="25.0000%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1199.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1173" width="25.0000%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1183.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spe..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1157" width="25.0000%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1167.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1141" width="25.0000%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1151.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1125" width="25.0000%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1135.50">&lt;core::iter::adapters::take_while::TakeW..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1109" width="25.0000%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1119.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1093" width="25.0000%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1103.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1077" width="25.0000%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1087.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1061" width="25.0000%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1071.50">core::ops::function::impls::&lt;impl core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1045" width="25.0000%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1055.50">core::ops::function::impls::&lt;impl core::..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::pack::_{{closure}} (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1029" width="25.0000%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1039.50">squishrs::archive::writer::ArchiveWriter..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::process_file (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="1013" width="25.0000%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1023.50">squishrs::archive::writer::ArchiveWriter..</text></g><g><title>squishrs::util::chunk::ChunkStore::insert (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="997" width="25.0000%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="1007.50">squishrs::util::chunk::ChunkStore::insert</text></g><g><title>zstd::bulk::compress (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="981" width="25.0000%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="991.50">zstd::bulk::compress</text></g><g><title>zstd::bulk::compressor::Compressor::compress (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="965" width="25.0000%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="975.50">zstd::bulk::compressor::Compressor::comp..</text></g><g><title>zstd::bulk::compressor::Compressor::compress_to_buffer (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="949" width="25.0000%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="959.50">zstd::bulk::compressor::Compressor::comp..</text></g><g><title>zstd_safe::CCtx::compress2 (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="933" width="25.0000%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="943.50">zstd_safe::CCtx::compress2</text></g><g><title>zstd_safe::WriteBuf::write_from (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="917" width="25.0000%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="927.50">zstd_safe::WriteBuf::write_from</text></g><g><title>zstd_safe::CCtx::compress2::_{{closure}} (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="901" width="25.0000%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="911.50">zstd_safe::CCtx::compress2::_{{closure}}</text></g><g><title>ZSTD_compress2 (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="885" width="25.0000%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="895.50">ZSTD_compress2</text></g><g><title>ZSTD_compressStream2_simpleArgs (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="869" width="25.0000%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="879.50">ZSTD_compressStream2_simpleArgs</text></g><g><title>ZSTD_compressStream2 (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="853" width="25.0000%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="863.50">ZSTD_compressStream2</text></g><g><title>ZSTD_compressStream_generic (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="837" width="25.0000%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="847.50">ZSTD_compressStream_generic</text></g><g><title>ZSTD_compressEnd_public (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="821" width="25.0000%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="831.50">ZSTD_compressEnd_public</text></g><g><title>ZSTD_compressContinue_internal (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="805" width="25.0000%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="815.50">ZSTD_compressContinue_internal</text></g><g><title>ZSTD_compress_frameChunk (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="789" width="25.0000%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="799.50">ZSTD_compress_frameChunk</text></g><g><title>ZSTD_compressBlock_internal (3,009,027 samples, 25.00%)</title><rect x="0.0000%" y="773" width="25.0000%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="783.50">ZSTD_compressBlock_internal</text></g><g><title>ZSTD_entropyCompressSeqStore (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="757" width="8.3333%" height="15" fill="rgb(245,192,40)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="767.50">ZSTD_entropy..</text></g><g><title>ZSTD_entropyCompressSeqStore_wExtLitBuffer (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="741" width="8.3333%" height="15" fill="rgb(238,167,29)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="751.50">ZSTD_entropy..</text></g><g><title>ZSTD_entropyCompressSeqStore_internal (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="725" width="8.3333%" height="15" fill="rgb(232,182,51)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="735.50">ZSTD_entropy..</text></g><g><title>ZSTD_compressLiterals (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="709" width="8.3333%" height="15" fill="rgb(231,60,39)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="719.50">ZSTD_compres..</text></g><g><title>HUF_compress4X_repeat (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="693" width="8.3333%" height="15" fill="rgb(208,69,12)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="703.50">HUF_compress..</text></g><g><title>HUF_compress_internal (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="677" width="8.3333%" height="15" fill="rgb(235,93,37)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="687.50">HUF_compress..</text></g><g><title>HUF_optimalTableLog (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="661" width="8.3333%" height="15" fill="rgb(213,116,39)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="671.50">HUF_optimalT..</text></g><g><title>HUF_buildCTable_wksp (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="645" width="8.3333%" height="15" fill="rgb(222,207,29)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="655.50">HUF_buildCTa..</text></g><g><title>HUF_sort (1,003,009 samples, 8.33%)</title><rect x="16.6667%" y="629" width="8.3333%" height="15" fill="rgb(206,96,30)" fg:x="2006018" fg:w="1003009"/><text x="16.9167%" y="639.50">HUF_sort</text></g><g><title>ZSTD_btGetAllMatches_noDict_3 (2,006,018 samples, 16.67%)</title><rect x="41.6667%" y="533" width="16.6667%" height="15" fill="rgb(218,138,4)" fg:x="5015045" fg:w="2006018"/><text x="41.9167%" y="543.50">ZSTD_btGetAllMatches_noDic..</text></g><g><title>ZSTD_btGetAllMatches_internal (1,003,009 samples, 8.33%)</title><rect x="50.0000%" y="517" width="8.3333%" height="15" fill="rgb(250,191,14)" fg:x="6018054" fg:w="1003009"/><text x="50.2500%" y="527.50">ZSTD_btGetAl..</text></g><g><title>ZSTD_insertBtAndGetAllMatches (1,003,009 samples, 8.33%)</title><rect x="50.0000%" y="501" width="8.3333%" height="15" fill="rgb(239,60,40)" fg:x="6018054" fg:w="1003009"/><text x="50.2500%" y="511.50">ZSTD_insertB..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1093" width="41.6667%" height="15" fill="rgb(206,27,48)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1103.50">rayon::iter::plumbing::Producer::fold_with</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1077" width="41.6667%" height="15" fill="rgb(225,35,8)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1087.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1061" width="41.6667%" height="15" fill="rgb(250,213,24)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1071.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T..</text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1045" width="41.6667%" height="15" fill="rgb(247,123,22)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1055.50">&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbin..</text></g><g><title>&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1029" width="41.6667%" height="15" fill="rgb(231,138,38)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1039.50">&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; as rayon::iter::plumbing::Fol..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="1013" width="41.6667%" height="15" fill="rgb(231,145,46)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1023.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::ex..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="997" width="41.6667%" height="15" fill="rgb(251,118,11)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="1007.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="981" width="41.6667%" height="15" fill="rgb(217,147,25)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="991.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="965" width="41.6667%" height="15" fill="rgb(247,81,37)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="975.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="949" width="41.6667%" height="15" fill="rgb(209,12,38)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="959.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="933" width="41.6667%" height="15" fill="rgb(227,1,9)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="943.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="917" width="41.6667%" height="15" fill="rgb(248,47,43)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="927.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator..</text></g><g><title>core::option::Option&lt;T&gt;::map (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="901" width="41.6667%" height="15" fill="rgb(221,10,30)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="911.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="885" width="41.6667%" height="15" fill="rgb(210,229,1)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="869" width="41.6667%" height="15" fill="rgb(222,148,37)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for ..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::pack::_{{closure}} (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="853" width="41.6667%" height="15" fill="rgb(234,67,33)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="863.50">squishrs::archive::writer::ArchiveWriter::pack::_{{closure}}</text></g><g><title>squishrs::archive::writer::ArchiveWriter::process_file (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="837" width="41.6667%" height="15" fill="rgb(247,98,35)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="847.50">squishrs::archive::writer::ArchiveWriter::process_file</text></g><g><title>squishrs::util::chunk::ChunkStore::insert (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="821" width="41.6667%" height="15" fill="rgb(247,138,52)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="831.50">squishrs::util::chunk::ChunkStore::insert</text></g><g><title>zstd::bulk::compress (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="805" width="41.6667%" height="15" fill="rgb(213,79,30)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="815.50">zstd::bulk::compress</text></g><g><title>zstd::bulk::compressor::Compressor::compress (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="789" width="41.6667%" height="15" fill="rgb(246,177,23)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="799.50">zstd::bulk::compressor::Compressor::compress</text></g><g><title>zstd::bulk::compressor::Compressor::compress_to_buffer (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="773" width="41.6667%" height="15" fill="rgb(230,62,27)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="783.50">zstd::bulk::compressor::Compressor::compress_to_buffer</text></g><g><title>zstd_safe::CCtx::compress2 (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="757" width="41.6667%" height="15" fill="rgb(216,154,8)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="767.50">zstd_safe::CCtx::compress2</text></g><g><title>zstd_safe::WriteBuf::write_from (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="741" width="41.6667%" height="15" fill="rgb(244,35,45)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="751.50">zstd_safe::WriteBuf::write_from</text></g><g><title>zstd_safe::CCtx::compress2::_{{closure}} (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="725" width="41.6667%" height="15" fill="rgb(251,115,12)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="735.50">zstd_safe::CCtx::compress2::_{{closure}}</text></g><g><title>ZSTD_compress2 (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="709" width="41.6667%" height="15" fill="rgb(240,54,50)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="719.50">ZSTD_compress2</text></g><g><title>ZSTD_compressStream2_simpleArgs (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="693" width="41.6667%" height="15" fill="rgb(233,84,52)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="703.50">ZSTD_compressStream2_simpleArgs</text></g><g><title>ZSTD_compressStream2 (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="677" width="41.6667%" height="15" fill="rgb(207,117,47)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="687.50">ZSTD_compressStream2</text></g><g><title>ZSTD_compressStream_generic (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="661" width="41.6667%" height="15" fill="rgb(249,43,39)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="671.50">ZSTD_compressStream_generic</text></g><g><title>ZSTD_compressEnd_public (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="645" width="41.6667%" height="15" fill="rgb(209,38,44)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="655.50">ZSTD_compressEnd_public</text></g><g><title>ZSTD_compressContinue_internal (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="629" width="41.6667%" height="15" fill="rgb(236,212,23)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="639.50">ZSTD_compressContinue_internal</text></g><g><title>ZSTD_compress_frameChunk (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="613" width="41.6667%" height="15" fill="rgb(242,79,21)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="623.50">ZSTD_compress_frameChunk</text></g><g><title>ZSTD_compressBlock_internal (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="597" width="41.6667%" height="15" fill="rgb(211,96,35)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="607.50">ZSTD_compressBlock_internal</text></g><g><title>ZSTD_buildSeqStore (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="581" width="41.6667%" height="15" fill="rgb(253,215,40)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="591.50">ZSTD_buildSeqStore</text></g><g><title>ZSTD_compressBlock_opt2 (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="565" width="41.6667%" height="15" fill="rgb(211,81,21)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="575.50">ZSTD_compressBlock_opt2</text></g><g><title>ZSTD_compressBlock_opt_generic (5,015,045 samples, 41.67%)</title><rect x="25.0000%" y="549" width="41.6667%" height="15" fill="rgb(208,190,38)" fg:x="3009027" fg:w="5015045"/><text x="25.2500%" y="559.50">ZSTD_compressBlock_opt_generic</text></g><g><title>ZSTD_getMatchPrice (1,003,009 samples, 8.33%)</title><rect x="58.3333%" y="533" width="8.3333%" height="15" fill="rgb(235,213,38)" fg:x="7021063" fg:w="1003009"/><text x="58.5833%" y="543.50">ZSTD_getMatc..</text></g><g><title>ZSTD_fracWeight (1,003,009 samples, 8.33%)</title><rect x="58.3333%" y="517" width="8.3333%" height="15" fill="rgb(237,122,38)" fg:x="7021063" fg:w="1003009"/><text x="58.5833%" y="527.50">ZSTD_fracWei..</text></g><g><title>ZSTD_highbit32 (1,003,009 samples, 8.33%)</title><rect x="58.3333%" y="501" width="8.3333%" height="15" fill="rgb(244,218,35)" fg:x="7021063" fg:w="1003009"/><text x="58.5833%" y="511.50">ZSTD_highbit..</text></g><g><title>ZSTD_countLeadingZeros32 (1,003,009 samples, 8.33%)</title><rect x="58.3333%" y="485" width="8.3333%" height="15" fill="rgb(240,68,47)" fg:x="7021063" fg:w="1003009"/><text x="58.5833%" y="495.50">ZSTD_countLe..</text></g><g><title>rayon_core::join::join_context::call_b::_{{closure}} (9,027,081 samples, 75.00%)</title><rect x="0.0000%" y="1317" width="75.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="9027081"/><text x="0.2500%" y="1327.50">rayon_core::join::join_context::call_b::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (9,027,081 samples, 75.00%)</title><rect x="0.0000%" y="1301" width="75.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="9027081"/><text x="0.2500%" y="1311.50">rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9,027,081 samples, 75.00%)</title><rect x="0.0000%" y="1285" width="75.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="9027081"/><text x="0.2500%" y="1295.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1269" width="50.0000%" height="15" fill="rgb(250,166,2)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1279.50">rayon_core::join::join_context</text></g><g><title>rayon_core::registry::in_worker (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1253" width="50.0000%" height="15" fill="rgb(242,216,29)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1263.50">rayon_core::registry::in_worker</text></g><g><title>rayon_core::join::join_context::_{{closure}} (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1237" width="50.0000%" height="15" fill="rgb(230,116,27)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1247.50">rayon_core::join::join_context::_{{closure}}</text></g><g><title>rayon_core::unwind::halt_unwinding (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1221" width="50.0000%" height="15" fill="rgb(228,99,48)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1231.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1205" width="50.0000%" height="15" fill="rgb(253,11,6)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1215.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1189" width="50.0000%" height="15" fill="rgb(247,143,39)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1199.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1173" width="50.0000%" height="15" fill="rgb(236,97,10)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1183.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1157" width="50.0000%" height="15" fill="rgb(233,208,19)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1167.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1141" width="50.0000%" height="15" fill="rgb(216,164,2)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1151.50">rayon_core::join::join_context::call_a::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1125" width="50.0000%" height="15" fill="rgb(220,129,5)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1135.50">rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (6,018,054 samples, 50.00%)</title><rect x="25.0000%" y="1109" width="50.0000%" height="15" fill="rgb(242,17,10)" fg:x="3009027" fg:w="6018054"/><text x="25.2500%" y="1119.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1093" width="8.3333%" height="15" fill="rgb(242,107,0)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1103.50">rayon_core::..</text></g><g><title>rayon_core::registry::in_worker (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1077" width="8.3333%" height="15" fill="rgb(251,28,31)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1087.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1061" width="8.3333%" height="15" fill="rgb(233,223,10)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1071.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1045" width="8.3333%" height="15" fill="rgb(215,21,27)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1055.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1029" width="8.3333%" height="15" fill="rgb(232,23,21)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1039.50">std::panic::..</text></g><g><title>std::panicking::try (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="1013" width="8.3333%" height="15" fill="rgb(244,5,23)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1023.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="997" width="8.3333%" height="15" fill="rgb(226,81,46)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="1007.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="981" width="8.3333%" height="15" fill="rgb(247,70,30)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="991.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="965" width="8.3333%" height="15" fill="rgb(212,68,19)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="975.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="949" width="8.3333%" height="15" fill="rgb(240,187,13)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="959.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="933" width="8.3333%" height="15" fill="rgb(223,113,26)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="943.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="917" width="8.3333%" height="15" fill="rgb(206,192,2)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="927.50">rayon::iter:..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="901" width="8.3333%" height="15" fill="rgb(241,108,4)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="911.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="885" width="8.3333%" height="15" fill="rgb(247,173,49)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="895.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="869" width="8.3333%" height="15" fill="rgb(224,114,35)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="879.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="853" width="8.3333%" height="15" fill="rgb(245,159,27)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="863.50">&lt;rayon::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="837" width="8.3333%" height="15" fill="rgb(245,172,44)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="847.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="821" width="8.3333%" height="15" fill="rgb(236,23,11)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="831.50">&lt;alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="805" width="8.3333%" height="15" fill="rgb(205,117,38)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="815.50">alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="789" width="8.3333%" height="15" fill="rgb(237,72,25)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="799.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="773" width="8.3333%" height="15" fill="rgb(244,70,9)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="783.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="757" width="8.3333%" height="15" fill="rgb(217,125,39)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="767.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="741" width="8.3333%" height="15" fill="rgb(235,36,10)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="751.50">&lt;core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="725" width="8.3333%" height="15" fill="rgb(251,123,47)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="735.50">core::option..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="709" width="8.3333%" height="15" fill="rgb(221,13,13)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="719.50">core::ops::f..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="693" width="8.3333%" height="15" fill="rgb(238,131,9)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="703.50">core::ops::f..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::pack::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="677" width="8.3333%" height="15" fill="rgb(211,50,8)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="687.50">squishrs::ar..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::process_file (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="661" width="8.3333%" height="15" fill="rgb(245,182,24)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="671.50">squishrs::ar..</text></g><g><title>squishrs::util::chunk::ChunkStore::insert (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="645" width="8.3333%" height="15" fill="rgb(242,14,37)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="655.50">squishrs::ut..</text></g><g><title>zstd::bulk::compress (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="629" width="8.3333%" height="15" fill="rgb(246,228,12)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="639.50">zstd::bulk::..</text></g><g><title>zstd::bulk::compressor::Compressor::compress (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="613" width="8.3333%" height="15" fill="rgb(213,55,15)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="623.50">zstd::bulk::..</text></g><g><title>zstd::bulk::compressor::Compressor::compress_to_buffer (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="597" width="8.3333%" height="15" fill="rgb(209,9,3)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="607.50">zstd::bulk::..</text></g><g><title>zstd_safe::CCtx::compress2 (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="581" width="8.3333%" height="15" fill="rgb(230,59,30)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="591.50">zstd_safe::C..</text></g><g><title>zstd_safe::WriteBuf::write_from (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="565" width="8.3333%" height="15" fill="rgb(209,121,21)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="575.50">zstd_safe::W..</text></g><g><title>zstd_safe::CCtx::compress2::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="549" width="8.3333%" height="15" fill="rgb(220,109,13)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="559.50">zstd_safe::C..</text></g><g><title>ZSTD_compress2 (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="533" width="8.3333%" height="15" fill="rgb(232,18,1)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="543.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream2_simpleArgs (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="517" width="8.3333%" height="15" fill="rgb(215,41,42)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="527.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream2 (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="501" width="8.3333%" height="15" fill="rgb(224,123,36)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="511.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream_generic (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="485" width="8.3333%" height="15" fill="rgb(240,125,3)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="495.50">ZSTD_compres..</text></g><g><title>ZSTD_compressEnd_public (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="469" width="8.3333%" height="15" fill="rgb(205,98,50)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="479.50">ZSTD_compres..</text></g><g><title>ZSTD_compressContinue_internal (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="453" width="8.3333%" height="15" fill="rgb(205,185,37)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="463.50">ZSTD_compres..</text></g><g><title>ZSTD_compress_frameChunk (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="437" width="8.3333%" height="15" fill="rgb(238,207,15)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="447.50">ZSTD_compres..</text></g><g><title>ZSTD_compressBlock_internal (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="421" width="8.3333%" height="15" fill="rgb(213,199,42)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="431.50">ZSTD_compres..</text></g><g><title>ZSTD_buildSeqStore (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="405" width="8.3333%" height="15" fill="rgb(235,201,11)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="415.50">ZSTD_buildSe..</text></g><g><title>ZSTD_compressBlock_opt2 (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="389" width="8.3333%" height="15" fill="rgb(207,46,11)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="399.50">ZSTD_compres..</text></g><g><title>ZSTD_compressBlock_opt_generic (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="373" width="8.3333%" height="15" fill="rgb(241,35,35)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="383.50">ZSTD_compres..</text></g><g><title>ZSTD_btGetAllMatches_noDict_3 (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="357" width="8.3333%" height="15" fill="rgb(243,32,47)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="367.50">ZSTD_btGetAl..</text></g><g><title>ZSTD_btGetAllMatches_internal (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="341" width="8.3333%" height="15" fill="rgb(247,202,23)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="351.50">ZSTD_btGetAl..</text></g><g><title>ZSTD_insertBtAndGetAllMatches (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="325" width="8.3333%" height="15" fill="rgb(219,102,11)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="335.50">ZSTD_insertB..</text></g><g><title>ZSTD_count (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="309" width="8.3333%" height="15" fill="rgb(243,110,44)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="319.50">ZSTD_count</text></g><g><title>MEM_readST (1,003,009 samples, 8.33%)</title><rect x="66.6667%" y="293" width="8.3333%" height="15" fill="rgb(222,74,54)" fg:x="8024072" fg:w="1003009"/><text x="66.9167%" y="303.50">MEM_readST</text></g><g><title>rayon_core::registry::WorkerThread::execute (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1477" width="83.3333%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1487.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1461" width="83.3333%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1471.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1445" width="83.3333%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1455.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1429" width="83.3333%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1439.50">rayon_core::job::JobResult&lt;T&gt;::call</text></g><g><title>rayon_core::unwind::halt_unwinding (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1413" width="83.3333%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1423.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1397" width="83.3333%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1407.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1381" width="83.3333%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1391.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1365" width="83.3333%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1375.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1349" width="83.3333%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1359.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (10,030,090 samples, 83.33%)</title><rect x="0.0000%" y="1333" width="83.3333%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="10030090"/><text x="0.2500%" y="1343.50">rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}}</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1317" width="8.3333%" height="15" fill="rgb(236,28,36)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1327.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1301" width="8.3333%" height="15" fill="rgb(249,185,26)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1311.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1285" width="8.3333%" height="15" fill="rgb(249,174,33)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1295.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1269" width="8.3333%" height="15" fill="rgb(233,201,37)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1279.50">std::panic::..</text></g><g><title>std::panicking::try (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1253" width="8.3333%" height="15" fill="rgb(221,78,26)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1263.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1237" width="8.3333%" height="15" fill="rgb(250,127,30)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1247.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1221" width="8.3333%" height="15" fill="rgb(230,49,44)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1231.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1205" width="8.3333%" height="15" fill="rgb(229,67,23)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1215.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1189" width="8.3333%" height="15" fill="rgb(249,83,47)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1199.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1173" width="8.3333%" height="15" fill="rgb(215,43,3)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1183.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1157" width="8.3333%" height="15" fill="rgb(238,154,13)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1167.50">rayon_core::..</text></g><g><title>rayon_core::registry::in_worker (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1141" width="8.3333%" height="15" fill="rgb(219,56,2)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1151.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1125" width="8.3333%" height="15" fill="rgb(233,0,4)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1135.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1109" width="8.3333%" height="15" fill="rgb(235,30,7)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1119.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1093" width="8.3333%" height="15" fill="rgb(250,79,13)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1103.50">std::panic::..</text></g><g><title>std::panicking::try (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1077" width="8.3333%" height="15" fill="rgb(211,146,34)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1087.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1061" width="8.3333%" height="15" fill="rgb(228,22,38)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1071.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1045" width="8.3333%" height="15" fill="rgb(235,168,5)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1055.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1029" width="8.3333%" height="15" fill="rgb(221,155,16)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1039.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="1013" width="8.3333%" height="15" fill="rgb(215,215,53)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1023.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="997" width="8.3333%" height="15" fill="rgb(223,4,10)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="1007.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="981" width="8.3333%" height="15" fill="rgb(234,103,6)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="991.50">rayon_core::..</text></g><g><title>rayon_core::registry::in_worker (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="965" width="8.3333%" height="15" fill="rgb(227,97,0)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="975.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="949" width="8.3333%" height="15" fill="rgb(234,150,53)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="959.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="933" width="8.3333%" height="15" fill="rgb(228,201,54)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="943.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="917" width="8.3333%" height="15" fill="rgb(222,22,37)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="927.50">std::panic::..</text></g><g><title>std::panicking::try (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="901" width="8.3333%" height="15" fill="rgb(237,53,32)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="911.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="885" width="8.3333%" height="15" fill="rgb(233,25,53)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="895.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="869" width="8.3333%" height="15" fill="rgb(210,40,34)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="879.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="853" width="8.3333%" height="15" fill="rgb(241,220,44)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="863.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="837" width="8.3333%" height="15" fill="rgb(235,28,35)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="847.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="821" width="8.3333%" height="15" fill="rgb(210,56,17)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="831.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="805" width="8.3333%" height="15" fill="rgb(224,130,29)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="815.50">rayon_core::..</text></g><g><title>rayon_core::registry::in_worker (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="789" width="8.3333%" height="15" fill="rgb(235,212,8)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="799.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="773" width="8.3333%" height="15" fill="rgb(223,33,50)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="783.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="757" width="8.3333%" height="15" fill="rgb(219,149,13)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="767.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="741" width="8.3333%" height="15" fill="rgb(250,156,29)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="751.50">std::panic::..</text></g><g><title>std::panicking::try (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="725" width="8.3333%" height="15" fill="rgb(216,193,19)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="735.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="709" width="8.3333%" height="15" fill="rgb(216,135,14)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="719.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="693" width="8.3333%" height="15" fill="rgb(241,47,5)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="703.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="677" width="8.3333%" height="15" fill="rgb(233,42,35)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="687.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="661" width="8.3333%" height="15" fill="rgb(231,13,6)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="671.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="645" width="8.3333%" height="15" fill="rgb(207,181,40)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="655.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="629" width="8.3333%" height="15" fill="rgb(254,173,49)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="639.50">rayon::iter:..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="613" width="8.3333%" height="15" fill="rgb(221,1,38)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="623.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="597" width="8.3333%" height="15" fill="rgb(206,124,46)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="607.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="581" width="8.3333%" height="15" fill="rgb(249,21,11)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="591.50">&lt;rayon::iter..</text></g><g><title>&lt;rayon::iter::extend::ListVecFolder&lt;T&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="565" width="8.3333%" height="15" fill="rgb(222,201,40)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="575.50">&lt;rayon::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="549" width="8.3333%" height="15" fill="rgb(235,61,29)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="559.50">&lt;alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="533" width="8.3333%" height="15" fill="rgb(219,207,3)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="543.50">&lt;alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="517" width="8.3333%" height="15" fill="rgb(222,56,46)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="527.50">alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="501" width="8.3333%" height="15" fill="rgb(239,76,54)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="511.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="485" width="8.3333%" height="15" fill="rgb(231,124,27)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="495.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="469" width="8.3333%" height="15" fill="rgb(249,195,6)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="479.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="453" width="8.3333%" height="15" fill="rgb(237,174,47)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="463.50">&lt;core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="437" width="8.3333%" height="15" fill="rgb(206,201,31)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="447.50">core::option..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="421" width="8.3333%" height="15" fill="rgb(231,57,52)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="431.50">core::ops::f..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="405" width="8.3333%" height="15" fill="rgb(248,177,22)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="415.50">core::ops::f..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::pack::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="389" width="8.3333%" height="15" fill="rgb(215,211,37)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="399.50">squishrs::ar..</text></g><g><title>squishrs::archive::writer::ArchiveWriter::process_file (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="373" width="8.3333%" height="15" fill="rgb(241,128,51)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="383.50">squishrs::ar..</text></g><g><title>squishrs::util::chunk::ChunkStore::insert (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="357" width="8.3333%" height="15" fill="rgb(227,165,31)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="367.50">squishrs::ut..</text></g><g><title>zstd::bulk::compress (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="341" width="8.3333%" height="15" fill="rgb(228,167,24)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="351.50">zstd::bulk::..</text></g><g><title>zstd::bulk::compressor::Compressor::compress (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="325" width="8.3333%" height="15" fill="rgb(228,143,12)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="335.50">zstd::bulk::..</text></g><g><title>zstd::bulk::compressor::Compressor::compress_to_buffer (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="309" width="8.3333%" height="15" fill="rgb(249,149,8)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="319.50">zstd::bulk::..</text></g><g><title>zstd_safe::CCtx::compress2 (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="293" width="8.3333%" height="15" fill="rgb(243,35,44)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="303.50">zstd_safe::C..</text></g><g><title>zstd_safe::WriteBuf::write_from (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="277" width="8.3333%" height="15" fill="rgb(246,89,9)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="287.50">zstd_safe::W..</text></g><g><title>zstd_safe::CCtx::compress2::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="261" width="8.3333%" height="15" fill="rgb(233,213,13)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="271.50">zstd_safe::C..</text></g><g><title>ZSTD_compress2 (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="245" width="8.3333%" height="15" fill="rgb(233,141,41)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="255.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream2_simpleArgs (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="229" width="8.3333%" height="15" fill="rgb(239,167,4)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="239.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream2 (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="213" width="8.3333%" height="15" fill="rgb(209,217,16)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="223.50">ZSTD_compres..</text></g><g><title>ZSTD_compressStream_generic (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="197" width="8.3333%" height="15" fill="rgb(219,88,35)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="207.50">ZSTD_compres..</text></g><g><title>ZSTD_compressEnd_public (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="181" width="8.3333%" height="15" fill="rgb(220,193,23)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="191.50">ZSTD_compres..</text></g><g><title>ZSTD_compressContinue_internal (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="165" width="8.3333%" height="15" fill="rgb(230,90,52)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="175.50">ZSTD_compres..</text></g><g><title>ZSTD_compress_frameChunk (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="149" width="8.3333%" height="15" fill="rgb(252,106,19)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="159.50">ZSTD_compres..</text></g><g><title>ZSTD_compressBlock_internal (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="133" width="8.3333%" height="15" fill="rgb(206,74,20)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="143.50">ZSTD_compres..</text></g><g><title>ZSTD_buildSeqStore (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="117" width="8.3333%" height="15" fill="rgb(230,138,44)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="127.50">ZSTD_buildSe..</text></g><g><title>ZSTD_compressBlock_opt2 (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="101" width="8.3333%" height="15" fill="rgb(235,182,43)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="111.50">ZSTD_compres..</text></g><g><title>ZSTD_compressBlock_opt_generic (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="85" width="8.3333%" height="15" fill="rgb(242,16,51)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="95.50">ZSTD_compres..</text></g><g><title>ZSTD_btGetAllMatches_noDict_3 (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="69" width="8.3333%" height="15" fill="rgb(248,9,4)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="79.50">ZSTD_btGetAl..</text></g><g><title>ZSTD_btGetAllMatches_internal (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="53" width="8.3333%" height="15" fill="rgb(210,31,22)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="63.50">ZSTD_btGetAl..</text></g><g><title>ZSTD_insertBtAndGetAllMatches (1,003,009 samples, 8.33%)</title><rect x="75.0000%" y="37" width="8.3333%" height="15" fill="rgb(239,54,39)" fg:x="9027081" fg:w="1003009"/><text x="75.2500%" y="47.50">ZSTD_insertB..</text></g><g><title>[libc.so.6] (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1781" width="91.6667%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1791.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1765" width="91.6667%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1775.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1749" width="91.6667%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1759.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1733" width="91.6667%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1743.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1717" width="91.6667%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1727.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1701" width="91.6667%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1711.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1685" width="91.6667%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1695.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1669" width="91.6667%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1679.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1653" width="91.6667%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1663.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1637" width="91.6667%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1647.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1621" width="91.6667%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1631.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1605" width="91.6667%" height="15" fill="rgb(252,136,11)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1615.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1589" width="91.6667%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1599.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1573" width="91.6667%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1583.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1557" width="91.6667%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1567.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1541" width="91.6667%" height="15" fill="rgb(251,222,45)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1551.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1525" width="91.6667%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1535.50">rayon_core::registry::WorkerThread::wait_until_out_of_work</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1509" width="91.6667%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1519.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (11,033,099 samples, 91.67%)</title><rect x="0.0000%" y="1493" width="91.6667%" height="15" fill="rgb(209,67,49)" fg:x="0" fg:w="11033099"/><text x="0.2500%" y="1503.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::registry::WorkerThread::find_work (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1477" width="8.3333%" height="15" fill="rgb(213,87,29)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1487.50">rayon_core::..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1461" width="8.3333%" height="15" fill="rgb(205,151,52)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1471.50">core::option..</text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1445" width="8.3333%" height="15" fill="rgb(253,215,39)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1455.50">rayon_core::..</text></g><g><title>rayon_core::registry::WorkerThread::steal (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1429" width="8.3333%" height="15" fill="rgb(221,220,41)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1439.50">rayon_core::..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1413" width="8.3333%" height="15" fill="rgb(218,133,21)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1423.50">core::iter::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1397" width="8.3333%" height="15" fill="rgb(221,193,43)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1407.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1381" width="8.3333%" height="15" fill="rgb(240,128,52)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1391.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1365" width="8.3333%" height="15" fill="rgb(253,114,12)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1375.50">core::iter::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1349" width="8.3333%" height="15" fill="rgb(215,223,47)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1359.50">core::ops::f..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1333" width="8.3333%" height="15" fill="rgb(248,225,23)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1343.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1317" width="8.3333%" height="15" fill="rgb(250,108,0)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1327.50">core::iter::..</text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1301" width="8.3333%" height="15" fill="rgb(228,208,7)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1311.50">rayon_core::..</text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1285" width="8.3333%" height="15" fill="rgb(244,45,10)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1295.50">crossbeam_de..</text></g><g><title>crossbeam_epoch::default::pin (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1269" width="8.3333%" height="15" fill="rgb(207,125,25)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1279.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::default::with_handle (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1253" width="8.3333%" height="15" fill="rgb(210,195,18)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1263.50">crossbeam_ep..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1237" width="8.3333%" height="15" fill="rgb(249,80,12)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1247.50">std::thread:..</text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1221" width="8.3333%" height="15" fill="rgb(221,65,9)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1231.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1205" width="8.3333%" height="15" fill="rgb(235,49,36)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1215.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1189" width="8.3333%" height="15" fill="rgb(225,32,20)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1199.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::internal::Local::pin (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1173" width="8.3333%" height="15" fill="rgb(215,141,46)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1183.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::internal::Global::collect (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1157" width="8.3333%" height="15" fill="rgb(250,160,47)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1167.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::internal::Global::try_advance (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1141" width="8.3333%" height="15" fill="rgb(216,222,40)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1151.50">crossbeam_ep..</text></g><g><title>&lt;crossbeam_epoch::sync::list::Iter&lt;T,C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1125" width="8.3333%" height="15" fill="rgb(234,217,39)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1135.50">&lt;crossbeam_e..</text></g><g><title>crossbeam_epoch::atomic::Shared&lt;T&gt;::tag (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1109" width="8.3333%" height="15" fill="rgb(207,178,40)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1119.50">crossbeam_ep..</text></g><g><title>crossbeam_epoch::atomic::decompose_tag (1,003,009 samples, 8.33%)</title><rect x="83.3333%" y="1093" width="8.3333%" height="15" fill="rgb(221,136,13)" fg:x="10030090" fg:w="1003009"/><text x="83.5833%" y="1103.50">crossbeam_ep..</text></g><g><title>all (12,036,108 samples, 100%)</title><rect x="0.0000%" y="1813" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="12036108"/><text x="0.2500%" y="1823.50"></text></g><g><title>squishrs (12,036,108 samples, 100.00%)</title><rect x="0.0000%" y="1797" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="12036108"/><text x="0.2500%" y="1807.50">squishrs</text></g><g><title>[unknown] (1,003,009 samples, 8.33%)</title><rect x="91.6667%" y="1781" width="8.3333%" height="15" fill="rgb(244,185,38)" fg:x="11033099" fg:w="1003009"/><text x="91.9167%" y="1791.50">[unknown]</text></g><g><title>_start (1,003,009 samples, 8.33%)</title><rect x="91.6667%" y="1765" width="8.3333%" height="15" fill="rgb(236,202,9)" fg:x="11033099" fg:w="1003009"/><text x="91.9167%" y="1775.50">_start</text></g></svg></svg>